// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO kuser (FirstName, LastName, Phone, Addr)
VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	Firstname string         `json:"firstname"`
	Lastname  string         `json:"lastname"`
	Phone     string         `json:"phone"`
	Addr      sql.NullString `json:"addr"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Firstname,
		arg.Lastname,
		arg.Phone,
		arg.Addr,
	)
	return err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE kuser
SET Active = False
WHERE Phone = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, phone string) error {
	_, err := q.db.ExecContext(ctx, deactivateUser, phone)
	return err
}

const listUser = `-- name: ListUser :many
SELECT firstname, lastname, phone, addr, active FROM kuser
`

func (q *Queries) ListUser(ctx context.Context) ([]Kuser, error) {
	rows, err := q.db.QueryContext(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Kuser
	for rows.Next() {
		var i Kuser
		if err := rows.Scan(
			&i.Firstname,
			&i.Lastname,
			&i.Phone,
			&i.Addr,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
