// Code generated by MockGen. DO NOT EDIT.
// Source: example/web-service-gin/handler/pgx (interfaces: DbConn)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	pgx "example/web-service-gin/handler/pgx"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgconn "github.com/jackc/pgconn"
)

// MockDbConn is a mock of DbConn interface.
type MockDbConn struct {
	ctrl     *gomock.Controller
	recorder *MockDbConnMockRecorder
}

// MockDbConnMockRecorder is the mock recorder for MockDbConn.
type MockDbConnMockRecorder struct {
	mock *MockDbConn
}

// NewMockDbConn creates a new mock instance.
func NewMockDbConn(ctrl *gomock.Controller) *MockDbConn {
	mock := &MockDbConn{ctrl: ctrl}
	mock.recorder = &MockDbConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbConn) EXPECT() *MockDbConnMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockDbConn) Exec(arg0 context.Context, arg1 string, arg2 ...interface{}) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDbConnMockRecorder) Exec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDbConn)(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *MockDbConn) Query(arg0 context.Context, arg1 string, arg2 ...interface{}) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDbConnMockRecorder) Query(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDbConn)(nil).Query), varargs...)
}
